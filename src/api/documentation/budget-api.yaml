openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Budget API'
  description: 'API for managing budgets.'
tags:
  - name: budget
    description: Operations about budgets
servers: #replace for your API Gateway URL
  - url: 'https://x40c0heqxf.execute-api.us-east-1.amazonaws.com/dev'
paths:
  /budget:
    get:
      tags:
        - 'budget'
      summary: 'Get paginated budgets'
      parameters:
        - name: PageSize
          in: query
          description: 'Number of items per page'
          schema:
            type: integer
        - name: LastEvaluatedKey
          in: query
          description: 'Last evaluated key for pagination'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBudgets'
        '400':
          description: 'Invalid input. Please check your request.'
        '403':
          description: 'Unauthorized. Authentication credentials were missing or incorrect.'
        '409':
          description: 'Conditions failed. Request conflicts with the current state of the server.'
        '500':
          description: 'Internal server error. Please try again later.'
    post:
      tags:
        - 'budget'
      summary: 'Create a new budget'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
      responses:
        '201':
          description: 'Successful operation. New budget created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          description: 'Invalid input. Please check your request.'
        '403':
          description: 'Unauthorized. Authentication credentials were missing or incorrect.'
        '409':
          description: 'Conditions failed. Request conflicts with the current state of the server.'
        '500':
          description: 'Internal server error. Please try again later.'
  /budget/{id}:
    get:
      tags:
        - 'budget'
      summary: 'Get a budget by ID'
      parameters:
        - name: id
          in: path
          description: 'ID of the budget to retrieve'
          required: true
          schema:
            type: string
            minLength: 36
            maxLength: 36
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          description: 'Invalid input. Please check your request.'
        '403':
          description: 'Unauthorized. Authentication credentials were missing or incorrect.'
        '404':
          description: 'Budget not found. The requested budget ID does not exist.'
    put:
      tags:
        - 'budget'
      summary: 'Update an existing budget'
      parameters:
        - name: id
          in: path
          description: 'ID of the budget to update'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
      responses:
        '200':
          description: 'Successful operation. Budget updated.'
        '400':
          description: 'Invalid input. Please check your request.'
        '403':
          description: 'Unauthorized. Authentication credentials were missing or incorrect.'
        '404':
          description: 'Budget not found. The requested budget ID does not exist.'
        '500':
          description: 'Internal server error. Please try again later.'
components:
  securitySchemes:
    ApiToken:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    Budget:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        ownerEmail:
          type: string
          format: email
        endDate:
          type: string
          format: date-time
        amountValue:
          type: number
          minimum: 1
    PaginatedBudgets:
      type: object
      properties:
        count:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/Budget'
        lastEvaluatedKey:
          type: string
